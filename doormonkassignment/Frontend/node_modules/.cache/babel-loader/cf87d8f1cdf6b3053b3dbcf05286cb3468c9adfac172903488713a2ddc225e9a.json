{"ast":null,"code":"import * as yup from \"yup\";\nconst schema = yup.object().shape({\n  firstName: yup.string().required().max(20),\n  lastName: yup.string().required().max(20),\n  email: yup.string().required(\"Email is required\").email(\"Invalid email format\"),\n  phoneNumber: yup.string().required().matches(/^\\d{10}$/, \"Invalid phone number\"),\n  // Define dynamic fields validation\n  educationalBackground: yup.array().of(yup.object().shape({\n    institutionName: yup.string().required(\"Institution Name is a required field\").max(50),\n    passOutYear: yup.number().typeError(\"Pass-out Year Is required\").required(\"Pass-out Year is required\").integer(\"Pass-out Year must be an integer\").min(2010, \"Pass-out Year must be greater than or equal to 2010\").max(2023, \"Pass-out Year must be less than or equal to 2023\"),\n    cgpiScore: yup.number()\n    // .typeError(\"CGPI/Score is required\")\n    .required(\"CGPI/Score \").min(0, \"CGPI/Score must be greater than or equal to 0\").max(10, \"CGPI/Score must be less than or equal to 10\")\n  }))\n});\nexport default schema;\n\n// import * as yup from \"yup\";\n\n// const schema = yup.object().shape({\n//   firstName: yup.string().required().max(20),\n//   lastName: yup.string().required().max(20),\n//   email: yup\n//     .string()\n//     .required(\"Email is required\")\n//     .email(\"Invalid email format\"),\n//   phoneNumber: yup\n//     .string()\n//     .required()\n//     .matches(/^\\d{10}$/, \"Invalid phone number\"),\n//   institutionName: yup.string().required().max(50),\n//   passOutYear: yup.number().required(\"Invalid Year\").min(2010).max(2023),\n//   cgpiScore: yup\n//     .number()\n//     .typeError(\"CGPI/Score must be a number\")\n//     .required(\"CGPI/Score is required\"),\n// });\n\n// export default schema;","map":{"version":3,"names":["yup","schema","object","shape","firstName","string","required","max","lastName","email","phoneNumber","matches","educationalBackground","array","of","institutionName","passOutYear","number","typeError","integer","min","cgpiScore"],"sources":["/home/manshreepadale/Documents/ReactGolangStudentsProject/ReactGolang/doormonkassignment/Frontend/src/components/Validation/ValidationSchema.js"],"sourcesContent":["import * as yup from \"yup\";\n\nconst schema = yup.object().shape({\n  firstName: yup.string().required().max(20),\n  lastName: yup.string().required().max(20),\n  email: yup\n    .string()\n    .required(\"Email is required\")\n    .email(\"Invalid email format\"),\n  phoneNumber: yup\n    .string()\n    .required()\n    .matches(/^\\d{10}$/, \"Invalid phone number\"),\n  // Define dynamic fields validation\n  educationalBackground: yup.array().of(\n    yup.object().shape({\n      institutionName: yup\n        .string()\n        .required(\"Institution Name is a required field\")\n        .max(50),\n      passOutYear: yup\n        .number()\n        .typeError(\"Pass-out Year Is required\")\n        .required(\"Pass-out Year is required\")\n        .integer(\"Pass-out Year must be an integer\")\n        .min(2010, \"Pass-out Year must be greater than or equal to 2010\")\n        .max(2023, \"Pass-out Year must be less than or equal to 2023\"),\n      cgpiScore: yup\n        .number()\n        // .typeError(\"CGPI/Score is required\")\n        .required(\"CGPI/Score \")\n        .min(0, \"CGPI/Score must be greater than or equal to 0\")\n        .max(10, \"CGPI/Score must be less than or equal to 10\"),\n    })\n  ),\n});\n\nexport default schema;\n\n// import * as yup from \"yup\";\n\n// const schema = yup.object().shape({\n//   firstName: yup.string().required().max(20),\n//   lastName: yup.string().required().max(20),\n//   email: yup\n//     .string()\n//     .required(\"Email is required\")\n//     .email(\"Invalid email format\"),\n//   phoneNumber: yup\n//     .string()\n//     .required()\n//     .matches(/^\\d{10}$/, \"Invalid phone number\"),\n//   institutionName: yup.string().required().max(50),\n//   passOutYear: yup.number().required(\"Invalid Year\").min(2010).max(2023),\n//   cgpiScore: yup\n//     .number()\n//     .typeError(\"CGPI/Score must be a number\")\n//     .required(\"CGPI/Score is required\"),\n// });\n\n// export default schema;\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;EAChCC,SAAS,EAAEJ,GAAG,CAACK,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE,CAAC;EAC1CC,QAAQ,EAAER,GAAG,CAACK,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE,CAAC;EACzCE,KAAK,EAAET,GAAG,CACPK,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,mBAAmB,CAAC,CAC7BG,KAAK,CAAC,sBAAsB,CAAC;EAChCC,WAAW,EAAEV,GAAG,CACbK,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,CAAC,CACVK,OAAO,CAAC,UAAU,EAAE,sBAAsB,CAAC;EAC9C;EACAC,qBAAqB,EAAEZ,GAAG,CAACa,KAAK,CAAC,CAAC,CAACC,EAAE,CACnCd,GAAG,CAACE,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;IACjBY,eAAe,EAAEf,GAAG,CACjBK,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,sCAAsC,CAAC,CAChDC,GAAG,CAAC,EAAE,CAAC;IACVS,WAAW,EAAEhB,GAAG,CACbiB,MAAM,CAAC,CAAC,CACRC,SAAS,CAAC,2BAA2B,CAAC,CACtCZ,QAAQ,CAAC,2BAA2B,CAAC,CACrCa,OAAO,CAAC,kCAAkC,CAAC,CAC3CC,GAAG,CAAC,IAAI,EAAE,qDAAqD,CAAC,CAChEb,GAAG,CAAC,IAAI,EAAE,kDAAkD,CAAC;IAChEc,SAAS,EAAErB,GAAG,CACXiB,MAAM,CAAC;IACR;IAAA,CACCX,QAAQ,CAAC,aAAa,CAAC,CACvBc,GAAG,CAAC,CAAC,EAAE,+CAA+C,CAAC,CACvDb,GAAG,CAAC,EAAE,EAAE,6CAA6C;EAC1D,CAAC,CACH;AACF,CAAC,CAAC;AAEF,eAAeN,MAAM;;AAErB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}